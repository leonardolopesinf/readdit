{"version":3,"sources":["components/Header/styles.tsx","components/Header/ThemeSwitch/styles.tsx","components/Header/ThemeSwitch/index.tsx","components/Header/index.tsx","context/FilterContext.tsx","components/Posts/PostFilter/styles.tsx","components/Posts/PostFilter/index.tsx","services/reddit/index.ts","utils/removeArrayExcess.ts","utils/formatCreatedTime.ts","utils/formatUrl.ts","components/Picture/index.tsx","components/Posts/Post/styles.tsx","components/Posts/Post/index.tsx","components/Posts/PostSkeleton/styles.tsx","components/Posts/PostSkeleton/index.tsx","components/Posts/ShowMore/styles.tsx","components/Posts/ShowMore/index.tsx","components/Posts/PostList/styles.tsx","components/Posts/PostList/index.tsx","components/Posts/styles.tsx","components/Posts/index.tsx","styles/theme.ts","hooks/usePersist.tsx","hooks/useTheme.tsx","styles/GlobalStyle.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HeaderContainer","styled","header","props","theme","colors","primary","HeaderTitle","h1","highlightText","complementary","SwitchContainer","div","SwitchInput","darken","lighten","secondary","ThemeSwitch","onChange","useContext","ThemeContext","title","switchValue","useMemo","onClick","className","checked","type","Header","toggleTheme","FilterContext","createContext","FilterProvider","children","useState","filter","setFilter","Provider","value","get","set","PostFilterContainer","PostFilterButton","button","active","filterNames","hot","new","top","PostFilter","handleChangeFilter","useCallback","event","selectedFilter","currentTarget","Object","keys","map","buttonValue","index","buttonText","redditUrl","getPosts","limit","after","Promise","resolve","reject","requestUrl","axios","then","response","posts","data","catch","error","status","removeArrayExcess","list","length","excess","slice","formatCreatedTime","milliseconds","now","moment","time","daysDiff","diff","hoursDiff","minutesDiff","formatUrl","url","replace","Picture","alt","defaultSrc","src","handleError","img","onerror","onError","PostContainer","PostThumbnail","PostDescription","gray","purpleText","text","Post","post","thumbnail","created","target","rel","href","author","permalink","PostSkeletonContainer","PostSkeletonItem","PostSkeletonRow","PostSkeletonColumn","PostSkeleton","color","skeletonColor","highlightColor","skeletonHightlight","skeletons","i","push","generateSkeletons","ShowMoreButton","ShowMore","loading","setLoading","handleClick","a","process","PostListContainer","ul","PostList","setPosts","getRedditPosts","lastPost","postsLimit","state","toast","handleShowMore","lastPostName","name","useEffect","finally","PostsContainer","section","Posts","light","background","dark","usePersist","key","initialValue","localStorage","getItem","setState","setItem","useTheme","setTheme","currentTheme","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb67c9f9.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const HeaderContainer = styled.header`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  width: 100%;\r\n  height: 9.1rem;\r\n\r\n  background-color: ${(props) => props.theme.colors.primary};\r\n`;\r\n\r\nexport const HeaderTitle = styled.h1`\r\n  font-size: 3.6rem;\r\n  line-height: 4.5rem;\r\n\r\n  user-select: none;\r\n\r\n  .react {\r\n    color: ${(props) => props.theme.colors.highlightText};\r\n  }\r\n\r\n  .js {\r\n    color: ${(props) => props.theme.colors.complementary};\r\n  }\r\n`;\r\n","import { darken, lighten } from \"polished\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const SwitchContainer = styled.div`\r\n  position: absolute;\r\n  right: 3rem;\r\n`;\r\n\r\nexport const SwitchInput = styled.div`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  width: 6.2rem;\r\n  height: 3rem;\r\n\r\n  padding: 0 0.2rem;\r\n\r\n  border-radius: 2rem;\r\n\r\n  background: ${(props) => darken(0.15, props.theme.colors.primary)};\r\n\r\n  font-size: 2rem;\r\n\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  .moon {\r\n    margin-right: auto;\r\n  }\r\n\r\n  .sun {\r\n  }\r\n\r\n  input {\r\n    display: none;\r\n  }\r\n\r\n  .circle {\r\n    position: absolute;\r\n    left: 0.3rem;\r\n\r\n    width: 2.6rem;\r\n    height: 2.6rem;\r\n\r\n    border-radius: 50%;\r\n\r\n    background: ${(props) => lighten(0.3, props.theme.colors.secondary)};\r\n\r\n    transition: all 0.5s ease;\r\n  }\r\n\r\n  input:checked + .circle {\r\n    left: 3.3rem;\r\n  }\r\n`;\r\n","import React, { useContext, useMemo } from \"react\";\r\nimport { ThemeContext } from \"styled-components\";\r\nimport { SwitchContainer, SwitchInput } from \"./styles\";\r\n\r\ntype Props = {\r\n  onChange: () => void;\r\n};\r\n\r\nconst ThemeSwitch: React.FC<Props> = ({ onChange }) => {\r\n  const { title: theme } = useContext(ThemeContext);\r\n\r\n  const switchValue = useMemo(() => theme === \"dark\", [theme]);\r\n\r\n  return (\r\n    <SwitchContainer>\r\n      <SwitchInput onClick={onChange}>\r\n        <span className=\"moon\">&#127772;</span>\r\n        <span className=\"sun\">&#127774;</span>\r\n        <input checked={switchValue} type=\"checkbox\" onChange={onChange} />\r\n        <div className=\"circle\" />\r\n      </SwitchInput>\r\n    </SwitchContainer>\r\n  );\r\n};\r\n\r\nexport default ThemeSwitch;\r\n","import React from \"react\";\r\nimport { HeaderContainer, HeaderTitle } from \"./styles\";\r\nimport ThemeSwitch from \"./ThemeSwitch\";\r\n\r\ntype Props = {\r\n  toggleTheme: () => void;\r\n};\r\n\r\nconst Header: React.FC<Props> = ({ toggleTheme }) => {\r\n  return (\r\n    <HeaderContainer>\r\n      <HeaderTitle>\r\n        <span className=\"react\">REACT</span>\r\n        <span className=\"js\">JS</span>\r\n      </HeaderTitle>\r\n      <ThemeSwitch onChange={toggleTheme} />\r\n    </HeaderContainer>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, {\r\n  createContext,\r\n  Dispatch,\r\n  SetStateAction,\r\n  useState,\r\n} from \"react\";\r\n\r\ntype FilterContextType = {\r\n  get: Reddit.PostFilter;\r\n  set: Dispatch<SetStateAction<Reddit.PostFilter>>;\r\n};\r\n\r\nexport const FilterContext = createContext({} as FilterContextType);\r\n\r\nconst FilterProvider: React.FC = ({ children }) => {\r\n  const [filter, setFilter] = useState<Reddit.PostFilter>(\"hot\");\r\n\r\n  return (\r\n    <FilterContext.Provider value={{ get: filter, set: setFilter }}>\r\n      {children}\r\n    </FilterContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FilterProvider;\r\n","import { darken } from \"polished\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const PostFilterContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  width: 100%;\r\n\r\n  margin-bottom: 2rem;\r\n\r\n  @media (max-width: 320px) {\r\n    flex-direction: column;\r\n\r\n    button {\r\n      width: 100%;\r\n      margin: 0 0 1rem 0;\r\n    }\r\n  }\r\n`;\r\n\r\ntype PostFilterButtonProps = {\r\n  active?: boolean;\r\n};\r\n\r\nexport const PostFilterButton = styled.button<PostFilterButtonProps>`\r\n  width: 20.2rem;\r\n  height: 4.8rem;\r\n\r\n  border: none;\r\n  border-radius: 0.8rem;\r\n\r\n  margin-right: 1.6rem;\r\n\r\n  background: ${(props) =>\r\n    props.active ? props.theme.colors.primary : props.theme.colors.secondary};\r\n\r\n  font-family: \"Mulish\", sans-serif;\r\n  font-weight: 600;\r\n  font-size: 2rem;\r\n  line-height: 2.5rem;\r\n\r\n  color: ${(props) => props.theme.colors.highlightText};\r\n\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  :hover {\r\n    background: ${(props) =>\r\n      props.active\r\n        ? props.theme.colors.primary\r\n        : darken(0.1, props.theme.colors.secondary)};\r\n  }\r\n\r\n  :last-child {\r\n    margin-right: 0;\r\n  }\r\n`;\r\n","import React, { MouseEvent, useCallback, useContext } from \"react\";\r\nimport { FilterContext } from \"../../../context/FilterContext\";\r\nimport { PostFilterButton, PostFilterContainer } from \"./styles\";\r\n\r\nconst filterNames: Posts.FilterNames = {\r\n  hot: \"Hot\",\r\n  new: \"News\",\r\n  top: \"Rising\",\r\n};\r\n\r\nconst PostFilter: React.FC = () => {\r\n  const { get: filter, set: setFilter } = useContext(FilterContext);\r\n\r\n  const handleChangeFilter = useCallback(\r\n    (event: MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => {\r\n      const { value: selectedFilter } = event.currentTarget;\r\n\r\n      setFilter(selectedFilter as Reddit.PostFilter);\r\n    },\r\n    [setFilter]\r\n  );\r\n\r\n  return (\r\n    <PostFilterContainer>\r\n      {Object.keys(filterNames).map((buttonValue, index) => {\r\n        const buttonText = filterNames[buttonValue as Reddit.PostFilter];\r\n\r\n        return (\r\n          <PostFilterButton\r\n            key={index}\r\n            value={buttonValue}\r\n            active={filter === buttonValue}\r\n            onClick={handleChangeFilter}\r\n          >\r\n            {buttonText}\r\n          </PostFilterButton>\r\n        );\r\n      })}\r\n    </PostFilterContainer>\r\n  );\r\n};\r\n\r\nexport default PostFilter;\r\n","import axios from \"axios\";\r\n\r\nexport const redditUrl = \"https://www.reddit.com\";\r\n\r\nexport const getPosts = (\r\n  filter: Reddit.PostFilter,\r\n  limit: number,\r\n  after?: string\r\n) => {\r\n  return new Promise<Reddit.Post[]>((resolve, reject) => {\r\n    let requestUrl = `${redditUrl}/r/reactjs/${filter}.json?limit=${limit}`;\r\n\r\n    if (after) requestUrl += `&after=${after}`;\r\n\r\n    axios\r\n      .get(requestUrl)\r\n      .then((response) => {\r\n        const subreddit = response.data;\r\n\r\n        const posts: Reddit.Post[] = subreddit.data.children;\r\n\r\n        resolve(posts);\r\n      })\r\n      .catch((error) => {\r\n        const { status } = error.response;\r\n\r\n        const message =\r\n          status === 404\r\n            ? \"Não foi possível encontrar os posts.\"\r\n            : \"Ocorreu um erro ao tentar buscar os posts.\";\r\n\r\n        reject(message);\r\n      });\r\n  });\r\n};\r\n","const removeArrayExcess = (list: any[], limit: number) => {\r\n  const { length } = list;\r\n\r\n  const excess = length - limit;\r\n\r\n  const newList = list.slice(0, length - excess);\r\n\r\n  return newList;\r\n};\r\n\r\nexport default removeArrayExcess;\r\n","import moment from \"moment\";\r\n\r\nconst formatCreatedTime = (milliseconds: number) => {\r\n  const now = moment();\r\n  const time = moment(milliseconds * 1000);\r\n\r\n  const daysDiff = now.diff(time, \"days\");\r\n\r\n  if (daysDiff >= 1) return `${daysDiff} dias`;\r\n\r\n  const hoursDiff = now.diff(time, \"hours\");\r\n\r\n  if (hoursDiff >= 1) return `${hoursDiff} horas`;\r\n\r\n  const minutesDiff = now.diff(time, \"minutes\");\r\n\r\n  if (minutesDiff >= 1) return `${minutesDiff} minutos`;\r\n\r\n  return \"poucos segundos\";\r\n};\r\n\r\nexport default formatCreatedTime;\r\n","const formatUrl = (url: string) => {\r\n  return url.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, \"\");\r\n};\r\n\r\nexport default formatUrl;\r\n","import React, { SyntheticEvent, useCallback } from \"react\";\r\n\r\ntype Props = {\r\n  alt: string;\r\n  defaultSrc: string;\r\n  src: string;\r\n};\r\n\r\nconst Picture: React.FC<Props> = ({ alt, defaultSrc, src }) => {\r\n  const handleError = useCallback(\r\n    (event: SyntheticEvent<HTMLImageElement, Event>) => {\r\n      const img = event.currentTarget;\r\n      img.onerror = null;\r\n      img.src = defaultSrc;\r\n      img.className = \"error-image\";\r\n    },\r\n    [defaultSrc]\r\n  );\r\n\r\n  return <img src={src} alt={alt} onError={handleError} />;\r\n};\r\n\r\nexport default Picture;\r\n","import { lighten } from \"polished\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const PostContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  padding: 1.2rem 0;\r\n`;\r\n\r\nexport const PostThumbnail = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  width: 7.7rem;\r\n  min-width: 7.7rem;\r\n  height: 7.7rem;\r\n  min-height: 7.7rem;\r\n\r\n  background: ${(props) => props.theme.colors.secondary};\r\n  border-radius: 0.8rem;\r\n\r\n  margin-right: 1.3rem;\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 0.8rem;\r\n  }\r\n\r\n  .error-image {\r\n    width: 80%;\r\n    height: 80%;\r\n  }\r\n`;\r\n\r\nexport const PostDescription = styled.div`\r\n  width: 100%;\r\n\r\n  overflow-x: hidden;\r\n\r\n  padding-right: 2rem;\r\n\r\n  font-size: 1.6rem;\r\n  line-height: 2rem;\r\n\r\n  overflow-wrap: break-word;\r\n\r\n  .title {\r\n    font-weight: 600;\r\n    font-size: 2rem;\r\n    line-height: 2.5rem;\r\n  }\r\n\r\n  div {\r\n    margin-bottom: 0.9rem;\r\n\r\n    .created {\r\n      color: ${(props) => props.theme.colors.gray};\r\n    }\r\n\r\n    .author {\r\n      color: ${(props) => props.theme.colors.purpleText};\r\n\r\n      :hover {\r\n        font-weight: bold;\r\n      }\r\n    }\r\n  }\r\n\r\n  .url {\r\n    display: block;\r\n    width: fit-content;\r\n    max-width: 100%;\r\n\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n\r\n    font-weight: bold;\r\n    color: ${(props) => props.theme.colors.text};\r\n\r\n    :hover {\r\n      color: ${(props) => lighten(0.5, props.theme.colors.text)};\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { redditUrl } from \"../../../services/reddit\";\r\nimport formatCreatedTime from \"../../../utils/formatCreatedTime\";\r\nimport formatUrl from \"../../../utils/formatUrl\";\r\nimport Picture from \"../../Picture\";\r\nimport { PostContainer, PostDescription, PostThumbnail } from \"./styles\";\r\n\r\ntype Props = {\r\n  post: Reddit.PostData;\r\n};\r\n\r\nconst Post: React.FC<Props> = ({ post }) => {\r\n  return (\r\n    <li>\r\n      <div className=\"divider\" />\r\n      <PostContainer>\r\n        <PostThumbnail>\r\n          <Picture\r\n            defaultSrc=\"https://cdn-icons-png.flaticon.com/512/52/52053.png\"\r\n            src={post.thumbnail}\r\n            alt=\"post thumbnail\"\r\n          />\r\n        </PostThumbnail>\r\n        <PostDescription>\r\n          <span className=\"title\">{post.title}</span>\r\n          <div>\r\n            <span className=\"created\">\r\n              enviado há {formatCreatedTime(post.created)} por{\" \"}\r\n            </span>\r\n            <a\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              href={`${redditUrl}/user/${post.author}`}\r\n              className=\"author\"\r\n            >\r\n              {post.author}\r\n            </a>\r\n          </div>\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            href={`${redditUrl}${post.permalink}`}\r\n            className=\"url\"\r\n          >\r\n            {formatUrl(`${redditUrl}${post.permalink}`)}\r\n          </a>\r\n        </PostDescription>\r\n      </PostContainer>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import styled from \"styled-components\";\r\n\r\nexport const PostSkeletonContainer = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nexport const PostSkeletonItem = styled.div`\r\n  width: 100%;\r\n  height: 10.1rem;\r\n\r\n  .divider {\r\n    opacity: 0.3;\r\n  }\r\n`;\r\n\r\nexport const PostSkeletonRow = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  margin: 1.2rem 0;\r\n\r\n  .image {\r\n    width: 7.7rem;\r\n    font-size: 7.7rem;\r\n    line-height: 7.7rem;\r\n\r\n    margin-right: 1.3rem;\r\n  }\r\n`;\r\n\r\nexport const PostSkeletonColumn = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  width: 100%;\r\n\r\n  font-size: 2rem;\r\n  line-height: 2rem;\r\n\r\n  .title {\r\n    width: 30%;\r\n\r\n    margin-bottom: 0.5rem;\r\n\r\n    font-size: 2rem;\r\n    line-height: 2rem;\r\n  }\r\n\r\n  .created {\r\n    width: 40%;\r\n\r\n    margin-bottom: 0.9rem;\r\n  }\r\n\r\n  .url {\r\n    width: 70%;\r\n  }\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\nimport { ThemeContext } from \"styled-components\";\r\nimport {\r\n  PostSkeletonColumn,\r\n  PostSkeletonContainer,\r\n  PostSkeletonItem,\r\n  PostSkeletonRow,\r\n} from \"./styles\";\r\n\r\nconst PostSkeleton: React.FC = () => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const generateSkeletons = () => {\r\n    const skeletons = [];\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      skeletons.push(\r\n        <PostSkeletonItem key={i}>\r\n          <div className=\"divider\" />\r\n          <PostSkeletonRow>\r\n            <div className=\"image\">\r\n              <Skeleton />\r\n            </div>\r\n            <PostSkeletonColumn>\r\n              <div className=\"title\">\r\n                <Skeleton />\r\n              </div>\r\n              <div className=\"created\">\r\n                <Skeleton />\r\n              </div>\r\n              <div className=\"url\">\r\n                <Skeleton />\r\n              </div>\r\n            </PostSkeletonColumn>\r\n          </PostSkeletonRow>\r\n        </PostSkeletonItem>\r\n      );\r\n    }\r\n\r\n    return skeletons;\r\n  };\r\n\r\n  return (\r\n    <PostSkeletonContainer>\r\n      <SkeletonTheme\r\n        color={theme.colors.skeletonColor}\r\n        highlightColor={theme.colors.skeletonHightlight}\r\n      >\r\n        {generateSkeletons()}\r\n      </SkeletonTheme>\r\n    </PostSkeletonContainer>\r\n  );\r\n};\r\n\r\nexport default PostSkeleton;\r\n","import { darken } from \"polished\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ShowMoreButton = styled.button`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  width: 98%;\r\n  height: 4.8rem;\r\n\r\n  margin: 0.9rem 0 0 0;\r\n\r\n  font-weight: 600;\r\n  font-size: 2rem;\r\n  line-height: 2.5rem;\r\n  color: ${(props) => props.theme.colors.highlightText};\r\n\r\n  background: ${(props) => props.theme.colors.primary};\r\n  border: none;\r\n  border-radius: 0.8rem;\r\n\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background: ${(props) => darken(0.05, props.theme.colors.primary)};\r\n  }\r\n\r\n  .plus {\r\n    position: relative;\r\n\r\n    width: 1.5rem;\r\n    height: 1.5rem;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    margin-right: 1.3rem;\r\n  }\r\n\r\n  .bar-one,\r\n  .bar-two {\r\n    position: absolute;\r\n\r\n    width: 100%;\r\n    height: 0.3rem;\r\n\r\n    background: ${(props) => props.theme.colors.highlightText};\r\n\r\n    border-radius: 0.2rem;\r\n  }\r\n\r\n  .bar-two {\r\n    transform: rotate(90deg);\r\n  }\r\n`;\r\n","import React, { useCallback, useState } from \"react\";\r\nimport { ShowMoreButton } from \"./styles\";\r\n\r\ntype Props = {\r\n  onClick: () => Promise<void>;\r\n};\r\n\r\nconst ShowMore: React.FC<Props> = ({ onClick }) => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const handleClick = useCallback(async () => {\r\n    setLoading(true);\r\n\r\n    await onClick();\r\n\r\n    setLoading(false);\r\n  }, [onClick]);\r\n\r\n  return (\r\n    <ShowMoreButton onClick={handleClick}>\r\n      {!loading ? (\r\n        <>\r\n          <div className=\"plus\">\r\n            <div className=\"bar-one\" />\r\n            <div className=\"bar-two\" />\r\n          </div>\r\n          Ver Mais\r\n        </>\r\n      ) : (\r\n        <img\r\n          src={`${process.env.PUBLIC_URL}/assets/loading.svg`}\r\n          alt=\"loading\"\r\n        />\r\n      )}\r\n    </ShowMoreButton>\r\n  );\r\n};\r\n\r\nexport default ShowMore;\r\n","import styled from \"styled-components\";\r\n\r\nexport const PostListContainer = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  width: 100%;\r\n\r\n  list-style-type: none;\r\n\r\n  li {\r\n    width: 100%;\r\n  }\r\n\r\n  .divider {\r\n    height: 0.1rem;\r\n    background: ${(props) => props.theme.colors.gray};\r\n  }\r\n`;\r\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FilterContext } from \"../../../context/FilterContext\";\r\nimport { getPosts } from \"../../../services/reddit\";\r\nimport removeArrayExcess from \"../../../utils/removeArrayExcess\";\r\nimport Post from \"../Post\";\r\nimport PostSkeleton from \"../PostSkeleton\";\r\nimport ShowMore from \"../ShowMore\";\r\nimport { PostListContainer } from \"./styles\";\r\n\r\nconst PostList: React.FC = () => {\r\n  const { get: filter } = useContext(FilterContext);\r\n\r\n  const [posts, setPosts] = useState<Reddit.Post[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const getRedditPosts = useCallback(\r\n    async (lastPost?: string) => {\r\n      try {\r\n        const postsLimit = 10;\r\n\r\n        let posts = await getPosts(filter, postsLimit, lastPost);\r\n\r\n        if (!lastPost && posts.length > postsLimit)\r\n          posts = removeArrayExcess(posts, postsLimit);\r\n\r\n        setPosts((state) => (lastPost ? [...state, ...posts] : posts));\r\n      } catch (error) {\r\n        toast(error as string, { type: \"error\" });\r\n      }\r\n    },\r\n    [filter]\r\n  );\r\n\r\n  const handleShowMore = useCallback(async () => {\r\n    const lastPost = posts[posts.length - 1];\r\n\r\n    const lastPostName = lastPost.data.name;\r\n\r\n    await getRedditPosts(lastPostName);\r\n  }, [getRedditPosts, posts]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    getRedditPosts().finally(() => setLoading(false));\r\n  }, [getRedditPosts]);\r\n\r\n  return (\r\n    <PostListContainer>\r\n      {!loading ? (\r\n        posts.map(({ data: post }) => <Post post={post} key={post.name} />)\r\n      ) : (\r\n        <PostSkeleton />\r\n      )}\r\n\r\n      {posts.length >= 10 && <ShowMore onClick={handleShowMore} />}\r\n    </PostListContainer>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const PostsContainer = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  padding: 2.1rem 5.7rem 3.8rem 5.7rem;\r\n`;\r\n","import React from \"react\";\r\nimport FilterProvider from \"../../context/FilterContext\";\r\nimport PostFilter from \"./PostFilter\";\r\nimport PostList from \"./PostList\";\r\nimport { PostsContainer } from \"./styles\";\r\n\r\nconst Posts: React.FC = () => {\r\n  return (\r\n    <PostsContainer>\r\n      <FilterProvider>\r\n        <PostFilter />\r\n        <PostList />\r\n      </FilterProvider>\r\n    </PostsContainer>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import { darken, lighten } from \"polished\";\r\nimport { DefaultTheme } from \"styled-components\";\r\n\r\nconst light: DefaultTheme = {\r\n  title: \"light\",\r\n\r\n  colors: {\r\n    primary: \"#6324C6\",\r\n    secondary: \"#A7B0BE\",\r\n    complementary: \"#FFB800\",\r\n    gray: \"#4C5667\",\r\n\r\n    background: \"#ffffff\",\r\n\r\n    text: \"#000000\",\r\n    highlightText: \"#FFFFFF\",\r\n    purpleText: \"#6324C6\",\r\n\r\n    skeletonColor: \"\",\r\n    skeletonHightlight: \"\",\r\n  },\r\n};\r\n\r\nconst dark: DefaultTheme = {\r\n  title: \"dark\",\r\n\r\n  colors: {\r\n    primary: \"#6324C6\",\r\n    secondary: \"#A7B0BE\",\r\n    complementary: \"#FFB800\",\r\n    gray: lighten(0.2, \"#4C5667\"),\r\n\r\n    background: \"#18191c\",\r\n\r\n    text: darken(0.12, \"#ffffff\"),\r\n    highlightText: \"#FFFFFF\",\r\n    purpleText: lighten(0.15, \"#6324C6\"),\r\n\r\n    skeletonColor: \"#202020\",\r\n    skeletonHightlight: \"#444\",\r\n  },\r\n};\r\n\r\nexport { light, dark };\r\n","import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\n\r\ntype Response = [string, Dispatch<SetStateAction<string>>];\r\n\r\nfunction usePersist(key: string, initialValue: string): Response {\r\n  const [state, setState] = useState<string>(() => {\r\n    const persistValue = localStorage.getItem(key);\r\n\r\n    return persistValue || initialValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(key, state);\r\n  }, [key, state]);\r\n\r\n  return [state, setState];\r\n}\r\n\r\nexport default usePersist;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport { DefaultTheme } from \"styled-components\";\r\nimport { dark, light } from \"../styles/theme\";\r\nimport usePersist from \"./usePersist\";\r\n\r\ntype Response = {\r\n  currentTheme: DefaultTheme;\r\n  toggleTheme: () => void;\r\n};\r\n\r\nfunction useTheme(): Response {\r\n  const [theme, setTheme] = usePersist(\"theme\", \"light\");\r\n\r\n  const currentTheme = useMemo(\r\n    () => (theme === \"light\" ? light : dark),\r\n    [theme]\r\n  );\r\n\r\n  const toggleTheme = useCallback(() => {\r\n    setTheme((state) => (state === \"light\" ? \"dark\" : \"light\"));\r\n  }, [setTheme]);\r\n\r\n  return { currentTheme, toggleTheme };\r\n}\r\n\r\nexport default useTheme;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    *{\r\n        margin: 0;\r\n        padding: 0;\r\n        outline: 0;\r\n        box-sizing: border-box;\r\n    }\r\n    html{\r\n        font-family: 'Mulish', sans-serif;\r\n        font-size: 62.5%;\r\n        font-weight: lighter;\r\n        color: ${(props) => props.theme.colors.text};\r\n        background-color: ${(props) => props.theme.colors.background};\r\n\r\n        @media(max-width: 1024px){\r\n            font-size: 52.5%\r\n        }\r\n\r\n        @media(max-width: 768px){\r\n            font-size: 35%\r\n        }\r\n\r\n        @media(max-width:425px){\r\n            font-size: 26%\r\n        }\r\n  \r\n    }\r\n\r\n    a{\r\n        text-decoration: none;\r\n    }\r\n\r\n    .Toastify__toast-body {\r\n        font-weight: 600;\r\n        font-size: 1.3rem;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { ThemeProvider } from \"styled-components\";\nimport Header from \"./components/Header\";\nimport Posts from \"./components/Posts\";\nimport useTheme from \"./hooks/useTheme\";\nimport GlobalStyle from \"./styles/GlobalStyle\";\n\nfunction App() {\n  const { currentTheme, toggleTheme } = useTheme();\n\n  return (\n    <ThemeProvider theme={currentTheme}>\n      <ToastContainer />\n      <GlobalStyle />\n      <Header toggleTheme={toggleTheme} />\n      <main>\n        <Posts />\n      </main>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}